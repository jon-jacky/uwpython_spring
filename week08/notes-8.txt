% talking points for week 8 lecture on PyPI, distutils, ...

Lots of tools, rather bewildering: distutils, setuptools, easy_install, pip, ...

Two kinds of tools:

distributing code: distutils, setuptools, ...
finding/installing code: easy_install, pip, ...

What problems do they solve?

Distributing/installing python modules/packages is easy - just
post/download the .py files - so what's the problem?

Review:

module - any .py file
package - directory containing modules, including at least  __init__.py 

You can make any dir of .py files into a package by adding an __init__.py
(which can be empty).

importing a package, importing modules from a package

PYTHONPATH and site-packages

All this is built into python, doesn't require any special libraries or tools

So - why distutils etc ?

distutils motivated by *publicizing* and *finding* Python packages.
It's not enough to just post them somewhere - people have to be able
to find them and learn about them (without installing).

distutils supports PyPI, Python Package Index (formerly Cheeseshop) -
modeled on Perl CPAN

distutils defines a standard format for *metadata* that describes
Python packages, also encourages a standard way to organize Python
packages.

The setup.py file - includes metadata, also includes build commands,
especially for extension modules.

...


References

Distributing Python Modules
http://docs.python.org/distutils/index.html

Installing Python Modules
http://docs.python.org/install/index.html

PyPI - the Python Package Index
http://pypi.python.org/pypi

CheeseShop Tutorial
http://wiki.python.org/moin/CheeseShopTutorial

A history of Python packaging
http://faassen.n--tree.net/blog/view/weblog/2009/11/09/0

Welcome to The Hitchhikerâ€™s Guide to Packaging
http://guide.python-distribute.org/

Tools of the Modern Python Hacker: Virtualenv, Fabric and Pip
http://www.clemesha.org/blog/modern-python-hacker-tools-virtualenv-fabric-pip

